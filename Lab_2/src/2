#ifndef _BPRED_H_
#define _BPRED_H_
#include <inttypes.h>

#define PRED_BITS 12
#define LIST_LENGTH 4096

static inline uint32_t SatIncrement(uint32_t x, uint32_t max)
{
    if(x < max) 
        return x+1;
    return x;
}

static inline uint32_t SatDecrement(uint32_t x)
{
    if(x > 0)
        return x-1;
    return x;
}

typedef enum BPRED_TYPE_ENUM {
    BPRED_PERFECT=0,
    BPRED_ALWAYS_TAKEN=1,
    BPRED_GSHARE=2, 
    NUM_BPRED_TYPE=3
} BPRED_TYPE;

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

typedef struct branch_pred {
	uint8_t pred:2;
}branch_pred;

class BPRED{
  uint32_t     policy;
  uint16_t     ghr:PRED_BITS;
  uint8_t      bp:2[LIST_LENGTH];

public:
  uint64_t stat_num_branches;
  uint64_t stat_num_mispred;
  
// The interface to the three functions below CAN NOT be changed
    BPRED(uint32_t policy);
    bool GetPrediction(uint64_t PC);
    void UpdatePredictor(uint64_t PC, bool resolveDir, bool predDir);
};

/***********************************************************/
#endif

